//Note: 定义全局 gradle 变量, 统一管理依赖
ext {
    packageName = 'com.hars'

    packageDir = 'com/hars'

    //2.2.3.RELEASE ==== Hoxton.RELEASE
    //2.1.12.RELEAS ==== Greenwich.SR4
    //2.1.6.RELEASE(有 RFD（反射型文件下载漏洞）) ==== Greenwich.SR1
    springBootVersion = '2.2.3.RELEASE'

    springCloudVersion =  'Hoxton.RELEASE'

    swaggerVersion = '2.9.2'

    mapstructVersion = '1.2.0.Final'

    jsonUnitVersion = '2.2.0'

    wechatVersion = '4.0.0'

    poiVersion = '4.0.0'

    /**
     * Spring
     */
    spring_boot_starter_thymeleaf        = 'org.springframework.boot:spring-boot-starter-thymeleaf'
    spring_boot_starter_security         = "org.springframework.boot:spring-boot-starter-security"
    spring_boot_starter_cache            = 'org.springframework.boot:spring-boot-starter-cache'
    spring_boot_starter_web              = 'org.springframework.boot:spring-boot-starter-web'
    spring_boot_starter_jdbc             = 'org.springframework.boot:spring-boot-starter-jdbc'
    spring_boot_starter_json             = 'org.springframework.boot:spring-boot-starter-json'
    spring_boot_starter_aop              = 'org.springframework.boot:spring-boot-starter-aop'
    spring_boot_starter_test             = "org.springframework.boot:spring-boot-starter-test"
    spring_security_test                 = 'org.springframework.security:spring-security-test'
    spring_session_core                  = 'org.springframework.session:spring-session-core'
    spring_session_redis                 = "org.springframework.session:spring-session-data-redis"
    spring_data_commons                  = 'org.springframework.data:spring-data-commons'
    spring_boot_starter_redis            = 'org.springframework.boot:spring-boot-starter-data-redis'
    spring_boot_starter_actuator         = 'org.springframework.boot:spring-boot-starter-actuator'
    spring_boot_starter_amqp             = 'org.springframework.boot:spring-boot-starter-amqp'
    spring_boot_starter_websocket        = 'org.springframework.boot:spring-boot-starter-websocket'
    spring_retry                         = 'org.springframework.retry:spring-retry'
    spring_integration                   = 'org.springframework.boot:spring-boot-starter-integration'
    spring_integration_stream            = 'org.springframework.integration:spring-integration-stream'
    spring_integration_mqtt              = 'org.springframework.integration:spring-integration-mqtt:5.5.6'


    //已使用的springCloud包
    //基础包都的用
    spring_cloud_eureka                  = 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
    //配置中心引用的包
    spring_cloud_config_server           = 'org.springframework.cloud:spring-cloud-config-server'
    //读取配置中心文件引用的包
    spring_cloud_starter_config          = 'org.springframework.cloud:spring-cloud-starter-config'
    //服务间调用接口 引用的包
    spring_cloud_starter_feign           = 'org.springframework.cloud:spring-cloud-starter-openfeign'
    //服务熔断(适用于Greenwich.SR1版本)
    spring_cloud_starter_netflix_hystrix         = 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix:2.0.0.RELEASE'
    //服务熔断(适用于Hoxton.RELEASE版本)
    spring_cloud_netflix_hystrix          =   'org.springframework.cloud:spring-cloud-netflix-hystrix:2.2.1.RELEASE'
    hystrix_javanica                     = 'com.netflix.hystrix:hystrix-javanica'

    spring_cloud_starter_netflix_ribbon = 'org.springframework.cloud:spring-cloud-starter-netflix-ribbon'

    spring_cloud_starter_netflix_zuul    =  'org.springframework.cloud:spring-cloud-starter-netflix-zuul'

    //动态刷新配置所需要的依赖
    spring_cloud_bus                     = 'org.springframework.cloud:spring-cloud-bus'
    //webhooks自动刷新配置所需要的依赖
    spring_cloud_config_monitor          = 'org.springframework.cloud:spring-cloud-config-monitor'

    //配置中心采用rabbitMq所需要的依赖
    spring_cloud_starter_bus_amqp        = 'org.springframework.cloud:spring-cloud-starter-bus-amqp'
    spring_cloud_starter_stream_rabbit   = 'org.springframework.cloud:spring-cloud-starter-stream-rabbit'

    //集成rabbitMq消息队列
    spring_cloud_starter_stream_rabbit = 'org.springframework.cloud:spring-cloud-starter-stream-rabbit'

    //配置中心采用kafka所需要的依赖
    spring_cloud_starter_bus_kafka       = 'org.springframework.cloud:spring-cloud-starter-bus-kafka'
    spring_cloud_starter_stream_kafka    = 'org.springframework.cloud:spring-cloud-starter-stream-kafka'

    spring_cloud_starter_consul_config   = 'org.springframework.cloud:spring-cloud-starter-consul-config'
    spring_cloud_starter_vault_config    = 'org.springframework.cloud:spring-cloud-starter-vault-config'
    spring_cloud_starter_zookeeper_config = 'org.springframework.cloud:spring-cloud-starter-zookeeper-config'

    kafka_streams                        = 'org.apache.kafka:kafka-streams'
    spring_kafka                         = 'org.springframework.kafka:spring-kafka'
    spring_kafka_test                    = 'org.springframework.kafka:spring-kafka-test'

    /**
     * dao
     */
    spring_boot_starter_jooq = 'org.springframework.boot:spring-boot-starter-jooq'
    spring_boot_starter_mybatis = 'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2'
    spring_boot_starter_data_mongodb     = 'org.springframework.boot:spring-boot-starter-data-mongodb'

    /**
     * Data Mapper
     */
    mapstruct = "org.mapstruct:mapstruct-jdk8:$mapstructVersion"
    mapstruct_processor = "org.mapstruct:mapstruct-processor:$mapstructVersion"

    /**
     * Swagger
     */
    swagger = "io.springfox:springfox-swagger2:$swaggerVersion"
    swagger_ui = "io.springfox:springfox-swagger-ui:$swaggerVersion"

    /**
     * WeChat
     */
    wechat_mini_app = "com.github.binarywang:weixin-java-miniapp:$wechatVersion"
    wechat_mp = "com.github.binarywang:weixin-java-mp:$wechatVersion"
    wechat_pay = "com.github.binarywang:weixin-java-pay:$wechatVersion"
    wechat_open = "com.github.binarywang:weixin-java-open:$wechatVersion"
    wechat_cp = "com.github.binarywang:weixin-java-cp:$wechatVersion"

    /**
     * Test
     */
    assertj_core = 'org.assertj:assertj-core'
    json_unit = "net.javacrumbs.json-unit:json-unit:$jsonUnitVersion"
    json_unit_fluent = "net.javacrumbs.json-unit:json-unit-fluent:$jsonUnitVersion"

    /**
     * POI
     */
    poi = "org.apache.poi:poi:$poiVersion"
    poi_ooxml = "org.apache.poi:poi-ooxml:$poiVersion"

    /**
     * Mybatis
     */
    mybatis_generator_core = 'org.mybatis.generator:mybatis-generator-core:1.3.7'
    mybatis_mapper = 'tk.mybatis:mapper:4.1.0'
    mybatis_page_helper_starter = 'com.github.pagehelper:pagehelper-spring-boot-starter:1.2.10'

    /**
     * qcloud sms sdk
     */
    qcloud_sms = 'com.github.qcloudsms:qcloudsms:1.0.5'

    /**
     * Extra
     */
    freemarker = 'org.freemarker:freemarker:2.3.23'
    mysql_connector = 'mysql:mysql-connector-java'
    lombok = 'org.projectlombok:lombok:1.18.2'
    httpclient = 'org.apache.httpcomponents:httpclient'
    commons_io = 'commons-io:commons-io:2.6'
    commons_collections = 'commons-collections:commons-collections:3.2.1'
    caffeine = 'com.github.ben-manes.caffeine:caffeine'
    logback_core = 'ch.qos.logback:logback-core'
    logback_classic = 'ch.qos.logback:logback-classic'
    logback_access = 'ch.qos.logback:logback-access'
    redisson = 'org.redisson:redisson:3.8.0'
    kaptcha = 'com.github.penggle:kaptcha:2.3.2'

    spring_tx = "org.springframework:spring-tx:5.1.8.RELEASE"
    commons_beanutils = 'commons-beanutils:commons-beanutils:1.9.3'
    validation_api    = 'javax.validation:validation-api:2.0.1.Final'
    ribbon_core = 'com.netflix.ribbon:ribbon-core:2.3.0'

    /**
     * 阿里云短信
     */
    aliyun_core = 'com.aliyun:aliyun-java-sdk-core:4.0.6'
    aliyun_sms = 'com.aliyun:aliyun-java-sdk-dysmsapi:1.1.0'

    /**
     * 阿里云上传
     */
    aliyun_oss = 'com.aliyun.oss:aliyun-sdk-oss:3.3.0'

    /**
     * 腾讯云短信
     */
    qcloud_sms = 'com.github.qcloudsms:qcloudsms:1.0.5'

    /**
     * 腾讯云上传
     */
    qcloud_cos_api = 'com.qcloud:cos_api:5.4.5'

    /**
     * 处理excel文件
     */
    easyexcel = 'com.alibaba:easyexcel:1.1.2-beat1'

    /**
     * 分库分表
     * 不使用spring需要引入的jar包
     */
    sharding_jdbc_core = 'org.apache.shardingsphere:sharding-jdbc-core:4.0.1';

    /**
     * 分库分表
     * 使用spring需要引入的jar包
     */
    sharding_jdbc_spring_boot_starter = 'io.shardingsphere:sharding-jdbc-spring-boot-starter:3.1.0'
    sharding_jdbc_spring_namespace = 'org.apache.shardingsphere:sharding-jdbc-spring-namespace:4.0.1'

    /**
     * 支付宝SDK
     */
    ali_pay = 'com.alipay.sdk:alipay-easysdk:2.0.1'

    /**
     * jwt Token加密
     */
    jwt = 'io.jsonwebtoken:jjwt:0.7.0'

    /**
     * mapper
     */
    //1.2.58以下都有漏洞
    alibaba_fastjson = "com.alibaba:fastjson:1.2.58"

    /**
     * http
     */
    httpmime = 'org.apache.httpcomponents:httpmime'

    opencsv = 'com.opencsv:opencsv:4.6'

    jsoup = 'org.jsoup:jsoup:1.9.2'

    mail = 'org.springframework.boot:spring-boot-starter-mail'

    //pdf
    itextpdf = 'com.itextpdf:itextpdf:5.5.9'
    itextAsian = 'com.itextpdf:itext-asian:5.2.0'
    poi = 'org.apache.poi:poi:3.9'
    poiOoxml = 'org.apache.poi:poi-ooxml:3.9'
    poiOoxmlSchemas = 'org.apache.poi:poi-ooxml-schemas:3.9'
    xmlworker = 'com.itextpdf.tool:xmlworker:5.5.9'
    tikaCore = 'org.apache.tika:tika-core:1.13'
    tikaParsers = 'org.apache.tika:tika-parsers:1.13'

    //fastDfs
    fastDfs = 'com.github.tobato:fastdfs-client:1.27.2'
    qiniu = 'com.qiniu:qiniu-java-sdk:7.7.+'


}
